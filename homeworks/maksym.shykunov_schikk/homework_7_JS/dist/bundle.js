// eslint-disable-next-line
!function (e) { var t = {}; function n(r) { if (t[r]) return t[r].exports; var u = t[r] = { i: r, l: !1, exports: {} }; return e[r].call(u.exports, u, u.exports, n), u.l = !0, u.exports } n.m = e, n.c = t, n.d = function (e, t, r) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: r }) }, n.r = function (e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t) return e; if (4 & t && "object" == typeof e && e && e.__esModule) return e; var r = Object.create(null); if (n.r(r), Object.defineProperty(r, "default", { enumerable: !0, value: e }), 2 & t && "string" != typeof e) for (var u in e) n.d(r, u, function (t) { return e[t] }.bind(null, u)); return r }, n.n = function (e) { var t = e && e.__esModule ? function () { return e.default } : function () { return e }; return n.d(t, "a", t), t }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) }, n.p = "", n(n.s = 0) }([function (e, t, n) { "use strict"; n.r(t); var r = { minLength: function (e, t) { return e.length >= t }, maxLength: function (e, t) { return e.length <= t }, pattern: function (e, t) { return e.match(t) }, email: function (e) { return this.pattern(e, /^\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i) }, phone: function (e) { return this.pattern(e, /^\+{1}\d{1,2}\({1}\d{3}\){1}\d{3}([-]{1}\d{2}){2}/) }, numberRange: function (e, t, n) { return "" === e || +e >= t && +e <= n } }; !function () { var e = document.querySelector("#main_form"), t = document.querySelectorAll(".validate"), n = document.querySelector("#first_name"), u = document.querySelector("#last_name"), o = document.querySelector("#email"), i = document.querySelector("#phone"), a = document.querySelector("#age"), l = document.querySelector(".success-message"); function c(e, t, n) { return r.minLength(e, t) && r.maxLength(e, n) } e.addEventListener("submit", (function (e) { e.preventDefault(); var f = c(n.value, 2, 20), d = c(u.value, 2, 20), s = r.email(o.value), m = r.phone(i.value), v = r.numberRange(a.value, 18, 120); function p(e, t) { e ? t.classList.remove("invalid") : t.classList.add("invalid") } p(f, n), p(d, u), p(s, o), p(m, i), p(v, a); for (var y = f && d && s && m && v, b = 0; b < t.length; b++)y && (l.style.display = "block", t[b].classList.remove("invalid")) })) }() }]);
// eslint-disable-next-line max-len
// # sourceMappingURL=data:application/json;charset=utf-8;base64,
